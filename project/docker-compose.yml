services:
  api-gateway:
    build:
      context: ./../api-gateway
      dockerfile: ./../api-gateway/api-gateway.dockerfile
    restart: always
    ports:
      - "8081:8081"
    deploy:
      mode: replicated
      replicas: 1

  auth-service:
    depends_on:
      - kafka
    build:
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authApp.dockerfile
    restart: always
    ports:
      - "8080"
    deploy:
      mode: replicated
      replicas: 1

  log-service:
    depends_on:
      - kafka
      - mongo-log
    build:
      context: ./../log-service
      dockerfile: ./../log-service/logApp.dockerfile
    restart: always
    ports:
      - "8080"
    deploy:
      mode: replicated
      replicas: 1

  mail-service:
    depends_on:
      - kafka
    build:
      context: ./../mail-service
      dockerfile: ./../mail-service/mailApp.dockerfile
    restart: always
    ports:
      - "8080"
    deploy:
      mode: replicated
      replicas: 1

  notification-service:
    depends_on:
      - kafka
    build:
      context: ./../notification-service
      dockerfile: ./../notification-service/notificationApp.dockerfile
    restart: always
    ports:
      - "8080:8082"
    deploy:
      mode: replicated
      replicas: 1

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    platform: linux/arm64
    depends_on:
      - zookeeper
    ports:
      - "9092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m"

  postgres-auth:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    ports:
      - "5432:5432"
    volumes:
      - ./sql/auth:/docker-entrypoint-initdb.d

  mongo-log:
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"

  # front-end:
  #   build:
  #     context: ./../front-end
  #     dockerfile: ./../front-end/front-end.dockerfile
  #   ports:
  #     - "5173:5173"
  #   volumes:
  #     - ./../front-end:/app
  #     - /app/node_modules
  #   stdin_open: true
  #   tty: true
